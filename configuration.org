* Configuration
** Emacs
*** Straight.el package manager set-up
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; Use the straight.el package manager
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)

  (setq straight-use-package-by-default t)
#+END_SRC
*** Basic visual customizations
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (scroll-bar-mode -1)			; Disable visible scrollbar
  (tool-bar-mode -1)			; Disable the toolbar
  (tooltip-mode -1)			; Disable tooltips
  (set-fringe-mode 10)			; Give some breathing room
  (menu-bar-mode -1)			; Disable the menu bar
  (setq visible-bell t)			; Set up the visible bell
  (global-set-key [remap just-one-space] ; Make M-SPC alternate between deleting one
		      'cycle-spacing)	; space, all spaces, or undoing the changes
  (add-to-list 'default-frame-alist '(fullscreen . maximized)) ; Start in fullscreen
  (setq perfect-margin-visible-width 128)
  (use-package recursion-indicator
    :straight t)
  (use-package spacious-padding
    :straight t)
#+END_SRC
*** Basic quality-of-life changes
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (delete-selection-mode 1)
  (winner-mode 1)
  (global-set-key [remap list-buffers] 'counsel-switch-buffer) ; Make C-x C-b launch counsel-switch-buffer
  (global-set-key [remap find-file] 'counsel-find-file) ; Make C-x C-f launch counsel-find-file
  ; (global-set-key (kbd "M-o") 'other-window) ; Making switching windows easier
  (windmove-default-keybindings) ; Make it possible to switch windows by using <shift> + <arrow key>
  (setq inhibit-startup-message t)
  (use-package helpful
    :straight t)
  (global-set-key [remap dabbrev-expand] 'hippie-expand) ;; From Mastering Emacs
  (setq make-backup-files nil)
  (use-package treemacs
    :straight t)
  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)
  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)
  (use-package projectile
    :straight t)
  (use-package cl-lib
    :straight t)
  ;; keep a list of recently opened files
  (require 'recentf)
  (recentf-mode 1)
  (setq mark-ring-max 32)
  (setq global-mark-ring-max 32)
  (setq disabled-command-function nil)
#+END_SRC
*** Counsel set-up
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package counsel
    :straight t
    :diminish)

  (use-package counsel-fd
    :straight t)
  (use-package counsel-web
    :straight t)
  (use-package counsel-projectile
    :straight t)

  (use-package counsel-at-point
    :straight t
    :commands (counsel-at-point-file-jump
	       counsel-at-point-git-grep
	       counsel-at-point-imenu))

  (global-set-key (kbd "M-n") 'counsel-at-point-git-grep)
  (global-set-key (kbd "M-o") 'counsel-at-point-imenu)
  (global-set-key (kbd "M-p") 'counsel-at-point-file-jump)

  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)

  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)

  ;; Look up *F*unctions (excludes macros).
  ;;
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)

  ;; Look up *C*ommands.
  ;;
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  (global-set-key (kbd "C-h C") #'helpful-command)

  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable)

  (counsel-mode 1)
#+END_SRC
*** Org Mode
**** Initial setup
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; Org
  (use-package org
    :straight t
    :config
    (setq org-ellipsis " â–¾"
	  org-hide-emphasis-markers t)
    (use-package org-roam
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "/Users/abelsen/Dropbox/My Mac/Documents/OrgRoamNotes")
      :bind (("C-c n l" . org-roam-buffer-toggle)
	     ("C-c n f" . org-roam-node-find)
	     ("C-c n i" . org-roam-node-insert)
	     :map org-mode-map
	     ("C-M-i" . completion-at-point))
      :config
      (org-roam-setup)))
#+END_SRC
**** Org Roam
**** Org Babel
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((dot . t))) ; this line activates dot
#+END_SRC
*** Programming
**** Protobuf
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (straight-use-package 'protobuf-mode)
#+END_SRC
**** DevOps
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package lsp-docker
    :straight t)
  (use-package dockerfile-mode
    :straight t)
  (use-package docker-compose-mode
    :straight t)
  (use-package kele
    :straight t)
  (use-package kubernetes
    :straight t)
  (use-package terraform-mode
    :straight t)
#+END_SRC
**** Text Editing
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package editorconfig
    :straight t
    :config
    (editorconfig-mode 1))
#+END_SRC
**** Git
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package git-gutter
    :straight t
    :config
    (global-git-gutter-mode +1))
#+END_SRC
**** Debugging
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp: yes
  (use-package realgud
    :straight t)
#+END_SRC
**** LSP
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; For IDE-like features
  (use-package lsp-mode
    :straight t
    :commands lsp
    :init
    (setq lsp-clangd-binary-path "/opt/homebrew/opt/llvm/bin/clangd")
    (setq lsp-clients-clangd-executable "/opt/homebrew/opt/llvm/bin/clangd")
    (setq lsp-clients-clangd-library-directories '("/opt/homebrew/opt/llvm/include/c++/v1"))
    :hook
    (sh-mode . lsp))
  (use-package lsp-ivy
    :straight t)
  (use-package lsp-ui
    :straight t)
  (use-package lsp-java
    :config
    (add-hook 'java-mode-hook 'lsp))
  (use-package lsp-haskell
    :straight t)
  (use-package lsp-scheme
    :straight t)
#+END_SRC
**** DAP
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package dap-mode
    :straight t
    :after lsp-mode
    :config (dap-auto-configure-mode))
#+END_SRC
**** Documentation
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (straight-use-package 'devdocs)
  (global-set-key (kbd "C-h D") 'devdocs-lookup)
#+END_SRC
**** Languages 
***** Agda
***** Bash
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (setq sh-basic-offset 2
	sh-indentation  2 ; This variable is now obsolete
	)
  ; To tell Emacs to recognize a buffer as Bash, put the below at the top of the file
  ; -*- mode: sh; sh-shell: bash; -*-
#+END_SRC
***** C
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package cmake-mode
    :straight t)
  (use-package cmake-font-lock
    :straight t)
#+end_src
***** Coq
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package proof-general
    :straight t)
  (use-package company-coq
    :straight t)
  ;; Load company-coq when opening Coq files
  (add-hook 'coq-mode-hook #'company-coq-mode)
#+end_src
***** F#
***** Haskell
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package haskell-snippets
    :straight t)
  (use-package haskell-mode
    :straight t
    :init
    ;; Hooks so haskell and literate haskell major modes trigger LSP setup
    (add-hook 'haskell-mode-hook #'lsp)
    (add-hook 'haskell-literate-mode-hook #'lsp))

  (define-key haskell-mode-map (kbd "<f8>") 'haskell-navigate-imports)
					  ; Company integration for Haskell
  (add-hook 'haskell-mode-hook
	    (lambda ()
	      (set (make-local-variable 'company-backends)
		   (append '((company-capf company-dabbrev-code))
			   company-backends))))
  (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)
					  ; Haskell compilation
  (eval-after-load "haskell-mode"
    '(define-key haskell-mode-map (kbd "C-c C-c") 'haskell-compile))
  (eval-after-load "haskell-cabal"
    '(define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-compile))
  (setq haskell-compile-cabal-build-command "stack build")
					  ; Interactive Haskell
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
					  ; Haskell-mode bindings
  (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
  (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
  (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
  (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
  (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)
					  ; Cabal-mode bindings
  (define-key haskell-cabal-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
  (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)
#+END_SRC
***** Lisp
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package sly
    :straight t
    :init
    (setq inferior-lisp-program "sbcl"))
  (use-package paredit
    :straight t
    :init
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook'scheme-mode-hook #'enable-paredit-mode))
#+END_SRC
***** OCaml
#+begin_src emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package caml
    :straight t
    :config (add-to-list 'auto-mode-alist '("\\.ml[iylp]?$" . caml-mode))
    )
  ;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
  (require 'opam-user-setup "${HOME}/.emacs.d/opam-user-setup.el")
  ;; ## end of OPAM user-setup addition for emacs / base ## keep this line
  (add-to-list 'load-path "${HOME}/.opam/repl/share/emacs/site-lisp")
  (require 'ocp-indent)
#+end_src
***** Rust
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (straight-use-package 'cargo) ; Rust configuration
  (straight-use-package 'rustic)
#+END_SRC
***** Scala
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (straight-use-package 'scala-mode)
  (straight-use-package 'lsp-metals)
#+END_SRC
***** Scheme
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  (use-package geiser
    :straight t)
#+END_SRC
*** Languages
**** Japanese
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 260)
  ;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 295 :weight 'regular)

  ;; For disabling warnings on MacOS
  ;; when opening directories with
  ;; Emacs
  ;; Taken from: https://stackoverflow.com/questions/25125200/emacs-error-ls-does-not-support-dired
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil)
    (set-face-attribute 'default nil :font "Iosevka NFM" :height 180))

  (use-package command-log-mode
    :straight t)

  ;; Use nord-theme
  (use-package nord-theme
    :straight t
    :init (load-theme 'nord t))

  ;; A better dired
  (use-package dirvish
    :straight t
    :init
    (dirvish-override-dired-mode))

  (use-package all-the-icons
    :straight t)

  ;; For Japanese study
  (use-package weblio
    :straight t)
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
  ;; Use deadgrep to quickly search the contents of files
  (straight-use-package 'deadgrep)

  ;; Magit
  (use-package magit
    :straight t)

  ;; For reading EPUB files
  (use-package nov
    :straight t
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))

  ;; Add "hybrid" numbers
  ;; I.e., the line corresponding to point
  ;; will show the absolute line number while
  ;; the rest will show relative line numbers
  (column-number-mode)
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode t)

  ;; Customize modeline
  (use-package telephone-line
    :straight t
    :init (telephone-line-mode 1))

  ;; Disable line numbers for some modes
  (dolist (mode '(eshell-mode-hook
		  org-mode-hook
		  shell-mode-hook
		  term-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package which-key
    :straight t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

  (use-package ivy
    :straight t
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    :config
    (use-package ivy-rich
      :straight t
      :init
      (ivy-rich-mode 1))
    (use-package swiper
      :straight t))
    (use-package ivy-posframe
      :straight t
      :init
      (ivy-posframe-mode 1)))

  (use-package markdown-mode
    :straight t
    :init (setq markdown-command "multimarkdown")
    :config (use-package markdown-toc))

  (use-package purescript-mode
    :straight t)

  (use-package company ; In-buffer completion
    :straight t
    :config
    ;; Trigger completion on Shift-Space
    (global-set-key (kbd "S-SPC") #'company-complete))
  (use-package yasnippet
    :straight t
    :config
    (yas-global-mode 1))

  (global-company-mode 1)
  (setq company-idle-delay 0)

  (use-package nix-mode ; Nix configuration
    :straight t
    :config
    (use-package nix-buffer
      :straight t)
    (use-package nix-sandbox
      :straight t)
    (use-package nix-env-install
      :straight t)
    (use-package nix-haskell-mode
      :straight t)
    (use-package nix-modeline
      :straight t)
    (use-package nix-update
      :straight t)
    (use-package nixpkgs-fmt
      :straight t))

  (use-package proof-general
    :straight t)
  (straight-use-package 'lean-mode) ; Lean configuration

  (use-package beacon
    :straight t
    :config (beacon-mode 1)); To keep track of cursor position

  (straight-use-package 'kurecolor)

  (straight-use-package 'ebuku)

  (straight-use-package 'format-all)

  (use-package flycheck
    :straight t
    :config
    (add-hook 'sh-mode-hook 'flycheck-mode)
    (use-package flycheck-mercury)
    (use-package flycheck-rust))

  (straight-use-package 'fancy-dabbrev)

  (straight-use-package 'yaml-mode)
#+END_SRC
** Shell
*** Bash
**** Scripts
**** .bash_profile
#+BEGIN_SRC bash :tangle ~/.bash_profile :mkdirp yes
  export PATH=$HOME/.cargo/bin:$PATH
  export PATH=/Library/Apple/usr/bin:$PATH
  export PATH=/Library/TeX/texbin:$PATH
  export PATH=/sbin:$PATH
  export PATH=/usr/sbin:$PATH
  export PATH=/bin:$PATH
  export PATH=/usr/bin:$PATH
  export PATH=/System/Cryptexes/App/usr/bin:$PATH

  export PATH=/opt/homebrew/sbin:$PATH
  export PATH=/opt/homebrew/bin:$PATH
  export PATH=$HOME/.local/bin:$PATH

  # Guile configuration
  export GUILE_LOAD_PATH="/opt/homebrew/share/guile/site/3.0"
  export GUILE_LOAD_COMPILED_PATH="/opt/homebrew/lib/guile/3.0/site-ccache"
  export GUILE_SYSTEM_EXTENSIONS_PATH="/opt/homebrew/lib/guile/3.0/extensions"

  # OCaml configuration
  export PATH="${HOME}/.opam/default/bin:${HOME}/.opam/default/sbin:${PATH}"

  # Haxe configuration
  export HAXE_STD_PATH="/opt/homebrew/lib/haxe/std"

  # Ensure GHCup is on $PATH
  export PATH=$HOME/.ghcup/bin:$PATH

  # Ensure user-local binaries are on $PATH
  export PATH=/usr/local/bin:$PATH
  export PATH=$HOME/bin:$PATH

  # Ensure Nix is on $PATH
  export PATH=/nix/var/nix/profiles/default/bin:$PATH
  export PATH=$HOME/.nix-profile/bin:$PATH

  # Ensure LLVM is on $PATH
  export PATH=/opt/homebrew/opt/llvm/bin:$PATH

  # Ensure Coursier-installed binaries are on $PATH
  export PATH=$HOME/Library/Application\ Support/Coursier/bin:$PATH

  # Ensure NPM is on $PATH
  export PATH="${PATH}:${HOME}/.npm/bin"

  # Ensure Deno is on $PATH
  export PATH="${HOME}/.deno/bin:${PATH}"

  # Preferred editor for local and remote sessions
  if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='vim'
  else
    export EDITOR='emacs'
  fi

  # The following prevents accidental loss of access to the nix commands
  # as a result of a macOS update.
  # Taken from: https://github.com/NixOS/nix/issues/2280#issue-339017509
  # Nix
  if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
    . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
  fi
  # End Nix

  source $HOME/.bashrc
#+END_SRC
**** .bashrc
#+BEGIN_SRC bash :tangle ~/.bashrc :mkdirp yes
  # Enable the subsequent settings only in interactive sessions
  case $- in
    ,*i*) ;;
      ,*) return;;
  esac

  # Path to your oh-my-bash installation.
  export OSH='/Users/abelsen/.oh-my-bash'

  # Set name of the theme to load. Optionally, if you set this to "random"
  # it'll load a random theme each time that oh-my-bash is loaded.
  OSH_THEME="font"

  # Uncomment the following line to use case-sensitive completion.
  # CASE_SENSITIVE="true"

  # Uncomment the following line to use hyphen-insensitive completion. Case
  # sensitive completion must be off. _ and - will be interchangeable.
  # HYPHEN_INSENSITIVE="true"

  # Uncomment the following line to disable bi-weekly auto-update checks.
  # DISABLE_AUTO_UPDATE="true"

  # Uncomment the following line to change how often to auto-update (in days).
  # export UPDATE_OSH_DAYS=13

  # Uncomment the following line to disable colors in ls.
  # DISABLE_LS_COLORS="true"

  # Uncomment the following line to disable auto-setting terminal title.
  # DISABLE_AUTO_TITLE="true"

  # Uncomment the following line to enable command auto-correction.
  # ENABLE_CORRECTION="true"

  # Uncomment the following line to display red dots whilst waiting for completion.
  # COMPLETION_WAITING_DOTS="true"

  # Uncomment the following line if you want to disable marking untracked files
  # under VCS as dirty. This makes repository status check for large repositories
  # much, much faster.
  # DISABLE_UNTRACKED_FILES_DIRTY="true"

  # Uncomment the following line if you want to change the command execution time
  # stamp shown in the history command output.  One of the following values can
  # be used to specify the timestamp format.
  # * 'mm/dd/yyyy'     # mm/dd/yyyy + time
  # * 'dd.mm.yyyy'     # dd.mm.yyyy + time
  # * 'yyyy-mm-dd'     # yyyy-mm-dd + time
  # * '[mm/dd/yyyy]'   # [mm/dd/yyyy] + [time] with colors
  # * '[dd.mm.yyyy]'   # [dd.mm.yyyy] + [time] with colors
  # * '[yyyy-mm-dd]'   # [yyyy-mm-dd] + [time] with colors
  # If not set, the default value is 'yyyy-mm-dd'.
  # HIST_STAMPS='yyyy-mm-dd'

  # Uncomment the following line if you do not want OMB to overwrite the existing
  # aliases by the default OMB aliases defined in lib/*.sh
  # OMB_DEFAULT_ALIASES="check"

  # Would you like to use another custom folder than $OSH/custom?
  # OSH_CUSTOM=/path/to/new-custom-folder

  # To disable the uses of "sudo" by oh-my-bash, please set "false" to
  # this variable.  The default behavior for the empty value is "true".
  OMB_USE_SUDO=true

  # Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
  # Custom completions may be added to ~/.oh-my-bash/custom/completions/
  # Example format: completions=(ssh git bundler gem pip pip3)
  # Add wisely, as too many completions slow down shell startup.
  completions=(
    git
    composer
    ssh
  )

  # Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
  # Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
  # Example format: aliases=(vagrant composer git-avh)
  # Add wisely, as too many aliases slow down shell startup.
  aliases=(
    general
  )

  # Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
  # Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
  # Example format: plugins=(rails git textmate ruby lighthouse)
  # Add wisely, as too many plugins slow down shell startup.
  plugins=(
    bashmarks
    git
    zoxide
  )

  # Which plugins would you like to conditionally load? (plugins can be found in ~/.oh-my-bash/plugins/*)
  # Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
  # Example format: 
  #  if [ "$DISPLAY" ] || [ "$SSH" ]; then
  #      plugins+=(tmux-autoattach)
  #  fi

  source "$OSH"/oh-my-bash.sh

  # User configuration
  # export MANPATH="/usr/local/man:$MANPATH"

  # You may need to manually set your language environment
  # export LANG=en_US.UTF-8

  # Preferred editor for local and remote sessions
  # if [[ -n $SSH_CONNECTION ]]; then
  #   export EDITOR='vim'
  # else
  #   export EDITOR='mvim'
  # fi

  # Compilation flags
  # export ARCHFLAGS="-arch x86_64"

  # ssh
  # export SSH_KEY_PATH="~/.ssh/rsa_id"

  # Set personal aliases, overriding those provided by oh-my-bash libs,
  # plugins, and themes. Aliases can be placed here, though oh-my-bash
  # users are encouraged to define aliases within the OSH_CUSTOM folder.
  # For a full list of active aliases, run `alias`.
  #
  # Example aliases
  # alias bashconfig="mate ~/.bashrc"
  # alias ohmybash="mate ~/.oh-my-bash"

  # Starship Configuration
  eval "$(starship init bash)"

#+END_SRC
** System
*** Brewfile
#+begin_src bash :tangle ~/.Brewfile
  tap "aconchillo/guile"
  tap "d12frosted/emacs-plus"
  tap "homebrew/bundle"
  tap "homebrew/cask-fonts"
  tap "homebrew/services"
  tap "jank-lang/jank"
  # Armed Bear Common Lisp: a full implementation of Common Lisp
  brew "abcl"
  # C++ Common Libraries
  brew "abseil"
  # Steel Bank Common Lisp system
  brew "sbcl"
  # Logic and programming language in which you can model computer systems
  brew "acl2"
  # Dependently typed functional programming language
  brew "agda"
  # CLI toolkit for working with Akamai's APIs
  brew "akamai"
  # Music programming language for musicians
  brew "alda"
  # High-performance theorem prover
  brew "z3"
  # GNU multiple precision arithmetic library
  brew "gmp"
  # GNU compiler collection
  brew "gcc"
  # Simple, modern and portable programming language for efficient scripting
  brew "arturo"
  # Text processor and publishing toolchain for AsciiDoc
  brew "asciidoctor"
  # Code searching, linting, rewriting
  brew "ast-grep"
  # Source code beautifier for C, C++, C#, and Java
  brew "astyle"
  # Programming language with formal specification features
  brew "ats2-postiats"
  # Improved shell history for zsh, bash, fish and nushell
  brew "atuin"
  # Text processing scripting language
  brew "awk"
  # Integrated shell for working with the AWS CLI
  brew "aws-shell"
  # Official Amazon AWS command-line interface
  brew "awscli"
  # Bourne-Again SHell, a UNIX command interpreter
  brew "bash"
  # Platform built on V8 to build network applications
  brew "node"
  # Language Server for Bash
  brew "bash-language-server"
  # Bash unit testing enterprise edition framework for professionals
  brew "bash_unit"
  # Clone of cat(1) with syntax highlighting and Git integration
  brew "bat"
  # Google's own build tool
  brew "bazel"
  # Arbitrary precision numeric processing language
  brew "bc"
  # Open-source formatting library for C++
  brew "fmt"
  # Generate compilation database for clang tooling
  brew "bear"
  # Size profiler for binaries
  brew "bloaty"
  # Collection of portable C++ source libraries
  brew "boost"
  # C++ library for C++/MPI interoperability
  brew "boost-mpi"
  # Package manager for the web
  brew "bower"
  # Interpreter for the brainfuck language
  brew "brainfuck"
  # New way to see and navigate directory trees
  brew "broot"
  # Powerful command-line bookmark manager
  brew "buku"
  # Compiler for the C3 language
  brew "c3c"
  # Brainfuck language toolkit
  brew "cattle"
  # Format codeblocks inside markdown and org documents
  brew "cbfmt"
  # C/C++/ObjC language server
  brew "ccls"
  # Turn English phrases to C or C++ declarations
  brew "cdecl"
  # Easy to use embedded scripting language for C++
  brew "chaiscript"
  # Cross-platform make
  brew "cmake", link: false
  # Package compiler and linker metadata toolkit
  brew "pkgconf"
  # Programming language for productive parallel computing at scale
  brew "chapel"
  # Checks for bashisms in shell scripts
  brew "checkbashisms"
  # Linter/analyzer for Makefiles
  brew "checkmake"
  # Check Java source against a coding standard
  brew "checkstyle"
  # Implementation of the Chez Scheme language
  brew "chezscheme"
  # Small footprint Scheme for use as a C Extension Language
  brew "chibi-scheme"
  # Compiler for the Scheme programming language
  brew "chicken"
  # Human-friendly and fast alternative to cut and (sometimes) awk
  brew "choose-rust"
  # Concurrent, on-the-fly audio programming language
  brew "chuck"
  # Formatting tools for C, C++, Obj-C, Java, JavaScript, TypeScript
  brew "clang-format"
  # Run a SQL like language to perform queries on C/C++ files
  brew "clangql"
  # C++ interpreter
  brew "cling"
  # Powerful, lightweight programming language
  brew "lua"
  # ASP system to ground and solve logic programs
  brew "clingo"
  # GNU CLISP, a Common Lisp implementation
  brew "clisp"
  # Formatting Clojure code
  brew "cljfmt"
  # Dynamic, general-purpose programming language
  brew "clojure"
  # Language Server (LSP) for Clojure
  brew "clojure-lsp"
  # Language Server for CMake
  brew "cmake-language-server"
  # Generate a Clang compilation database for Make-based build systems
  brew "compiledb"
  # General purpose programming language in the ML family
  brew "ocaml"
  # Object-oriented, actor-model, capabilities-secure programming language
  brew "ponyc"
  # Dependency manager for the Pony language
  brew "corral"
  # Pure Scala Artifact Fetching
  brew "coursier"
  # Static analysis of C and C++ code
  brew "cppcheck"
  # See your source code with the eyes of a compiler
  brew "cppinsights"
  # Static code checker for C++
  brew "cpplint"
  # Domain-specific language for specifying cryptographic algorithms
  brew "cryptol"
  # Fast and statically typed, compiled language with Ruby-like syntax
  brew "crystal"
  # SQL-like query language for csv
  brew "csvq"
  # Programming language for digital color management
  brew "ctl"
  # Get a file from an HTTP, HTTPS or FTP server
  brew "curl"
  # Compiler for writing C extensions for the Python language
  brew "cython"
  # Verification-aware programming language
  brew "dafny"
  # POSIX-compliant descendant of NetBSD's ash (the Almquist SHell)
  brew "dash"
  # Formatter for D source code
  brew "dfmt"
  # Interpreter for the Dhall language
  brew "dhall"
  # Compile Dhall to Bash
  brew "dhall-bash"
  # Dhall to JSON compiler and a Dhall to YAML compiler
  brew "dhall-json"
  # Language Server Protocol (LSP) server for Dhall
  brew "dhall-lsp-server"
  # Convert between Dhall and Toml
  brew "dhall-toml"
  # Convert between Dhall and YAML
  brew "dhall-yaml"
  # Good-lookin' diffs with diff-highlight and more
  brew "diff-so-fancy"
  # Diff that understands syntax
  brew "difftastic"
  # Distributed compiler client and server
  brew "distcc"
  # Git for Data
  brew "dolt"
  # Dolt for Postgres
  brew "doltgres"
  # Generate documentation for several programming languages
  brew "doxygen"
  # D programming language tools
  brew "dtools"
  # Simple, extendable and embeddable scripting language
  brew "duckscript"
  # Composable build system for OCaml
  brew "dune"
  # Embeddable Common Lisp
  brew "ecl"
  # Tool to verify that your files are in harmony with your .editorconfig
  brew "editorconfig-checker"
  # Development environment for the Eiffel language
  brew "eiffelstudio"
  # Lean Theorem Prover installer and version manager
  brew "elan-init"
  # Programming language for highly scalable real-time systems
  brew "erlang"
  # Functional metaprogramming aware language built on Erlang VM
  brew "elixir"
  # Erlang Style Reviewer
  brew "elvis"
  # Emacs plugin using libclang to complete C/C++ code
  brew "emacs-clang-complete-async"
  # Small epoll implementation using kqueue
  brew "epoll-shim"
  # Theorem prover for full first-order logic with equality
  brew "eprover"
  # Statically typed language that can deeply improve the Python ecosystem
  brew "erg"
  # Extremely fast JavaScript bundler and minifier
  brew "esbuild"
  # Calculator REPL, similar to bc(1)
  brew "eva"
  # Command-line tool to interact with exercism.io
  brew "exercism"
  # Extra modules and scripts for CMake
  brew "extra-cmake-modules"
  # Modern, maintained replacement for ls
  brew "eza"
  # Functional programming language for real time signal processing
  brew "faust"
  # Simple, fast and user-friendly alternative to find
  brew "fd"
  # Lua Lisp Language
  brew "fennel"
  # Indent and beautify Fortran sources and generate dependency information
  brew "findent"
  # Stack trace visualizer
  brew "flamegraph"
  # LLVM Fortran Frontend
  brew "flang"
  # Check your project for common sources of contributor friction
  brew "flint-checker"
  # Statically typed functional, imperative, and logic programming language
  brew "flix"
  # Lightweight scripting language for querying databases
  brew "flux"
  # Command-line tools for fly.io services
  brew "flyctl"
  # Formatter for Fennel code
  brew "fnlfmt"
  # Fortran language server
  brew "fortls"
  # Non-strict, functional programming language in the spirit of Haskell
  brew "frege"
  # Data-parallel functional programming language
  brew "futhark"
  # Cross-platform application and UI framework
  brew "qt"
  # Toolkit for developing constraint-based systems and applications
  brew "gecode"
  # Implementation of the ANS Forth language
  brew "gforth"
  # Installer for the general purpose language Haskell
  brew "ghcup"
  # Distributed revision control system
  brew "git"
  # Git query language
  brew "gitql"
  # Statically typed language for the Erlang VM
  brew "gleam"
  # Static, type inferred and embeddable language written in Rust
  brew "gluon"
  # GNU implementation of the programming language APL
  brew "gnu-apl"
  # Prolog compiler with constraint solving
  brew "gnu-prolog"
  # Implementation of the Smalltalk language
  brew "gnu-smalltalk"
  # Pragmatic language for the JVM
  brew "gosu"
  # Graph visualization software from AT&T and Bell Labs
  brew "graphviz"
  # Java-based scripting language
  brew "groovy"
  # GNU Ubiquitous Intelligent Language for Extensions
  brew "guile"
  # Guile bindings for the GnuTLS library
  brew "guile-gnutls"
  # Tool for glamorous shell scripts
  brew "gum"
  # High-level, dynamically typed programming language
  brew "neko"
  # Multi-platform programming language
  brew "haxe"
  # Language server for Helm
  brew "helm-ls"
  # Easy plain text accounting with command-line, terminal and web UIs
  brew "hledger"
  # Haskell source code suggestions
  brew "hlint"
  # Modern format for Haskell packages
  brew "hpack"
  # Dialect of Lisp that's embedded in Python
  brew "hy"
  # Command-line benchmarking tool
  brew "hyperfine"
  # Verilog simulation and synthesis tool
  brew "icarus-verilog"
  # General-purpose programming language
  brew "icon"
  # Pure functional programming language with dependent types
  brew "idris2"
  # Tools and libraries to manipulate images in many formats
  brew "imagemagick"
  # Tool to analyze #includes in C and C++ source files
  brew "include-what-you-use"
  # Safe and concurrent object-oriented programming language
  brew "inko"
  # Dynamic language and bytecode vm
  brew "janet"
  # JQ clone focussed on correctness, speed, and simplicity
  brew "jaq"
  # Embeddable scripting language for real-time applications
  brew "jinx"
  # Service-oriented programming language
  brew "jolie"
  # Lightweight and flexible command-line JSON processor
  brew "jq"
  # Handy way to save and run project-specific commands
  brew "just"
  # Programming language for Java (implementation of Scheme)
  brew "kawa"
  # Compiler for the Koka language
  brew "koka"
  # Open-source implementation of the K programming language
  brew "kona"
  # Portable D programming language compiler
  brew "ldc"
  # Compiled programming language inspired by COBOL
  brew "ldpl"
  # Concurrent Lisp for the Erlang VM
  brew "lfe"
  # JIT library for the GNU compiler collection
  brew "libgccjit"
  # Declarative object-oriented logic programming language
  brew "logtalk"
  # Package manager for the Lua programming language
  brew "luarocks"
  # Fast, safe, gradually typed embeddable scripting language derived from Lua
  brew "luau"
  # Utility for directing compilation
  brew "make"
  # Generate a markdown TOC (table of contents) with Remarkable
  brew "markdown-toc"
  # Mathematical Components for the Coq proof assistant
  brew "math-comp"
  # Safe, concurrent, practical language
  brew "rust"
  # Build and publish Rust crates as Python packages
  brew "maturin"
  # Logic/functional programming language
  brew "mercury"
  # Small build system for use with gyp or CMake
  brew "ninja"
  # Fast and user friendly build system
  brew "meson"
  # Programs that partition graphs and order matrices
  brew "metis"
  # Medium-level constraint modeling language
  brew "minizinc", link: false
  # Modern Linker
  brew "mold"
  # Run multiple commands in parallel
  brew "mprocs"
  # Turn marked-up plain text into well-formatted documents
  brew "multimarkdown"
  # Another cmake lsp
  brew "neocmakelsp"
  # Programming language for deeply networked systems
  brew "nesc"
  # Statically typed, embedded functional programming language
  brew "never"
  # Lisp-like, general-purpose scripting language
  brew "newlisp"
  # Statically typed compiled systems programming language
  brew "nim"
  # Object-oriented, Lisp-like programming language
  brew "nu"
  # Modern shell for the GitHub era
  brew "nushell"
  # Expressive, simple, dynamic programming language
  brew "oak"
  # OCI-based ASDF system distribution and management tool for Common Lisp
  brew "ocicl"
  # High-level interpreted language for numerical computing
  brew "octave"
  # Programming language with focus on simplicity, performance and modern systems
  brew "odin"
  # Bash-compatible Unix shell with more consistent syntax and semantics
  brew "oils-for-unix"
  # Purely functional dialect of Lisp
  brew "ol"
  # OCaml package manager
  brew "opam"
  # Tool for writing definitions of programming languages and calculi
  brew "ott"
  # Parser generator for C
  brew "packcc"
  # PostgreSQL syntax beautifier
  brew "pgformatter"
  # Simple, and yet powerful, logic-based multi-paradigm programming language
  brew "picat"
  # Dynamic programming language
  brew "pike"
  # Execute binaries from Python packages in isolated environments
  brew "pipx"
  # Python package management tool
  brew "poetry"
  # Adds support for geographic objects to PostgreSQL
  brew "postgis"
  # Object-relational database system
  brew "postgresql@17", restart_service: :changed
  # Code formatter for JavaScript, CSS, JSON, GraphQL, Markdown, YAML
  brew "prettier"
  # Automated theorem prover for first-order and equational logic
  brew "prover9"
  # Strongly typed programming language that compiles to JavaScript
  brew "purescript"
  # Language Server Protocol server for PureScript
  brew "purescript-language-server"
  # It's not just a linter that annoys you!
  brew "pylint"
  # Python Language Server for the Language Server Protocol
  brew "python-lsp-server"
  # Search tool like grep and The Silver Searcher
  brew "ripgrep"
  # Wrapper around ripgrep that adds multiple rich file types
  brew "ripgrep-all"
  # Lisp installer and launcher for major environments
  brew "roswell"
  # Source code cross-referencer like ctags with a clang frontend
  brew "rtags"
  # Ruby autoformatter
  brew "rubyfmt"
  # Extremely fast Python linter, written in Rust
  brew "ruff"
  # Language Server Protocol implementation for Ruff
  brew "ruff-lsp"
  # Rye is a homoiconic programming language focused on fluid expressions
  brew "ryelang"
  # Scala-based build system
  brew "sbuild"
  # Command-line tool to manage Scala environments
  brew "scalaenv"
  # High-performance linear algebra for distributed memory machines
  brew "scalapack"
  # Run scalastyle from the command-line
  brew "scalastyle"
  # Intuitive find & replace CLI
  brew "sd"
  # Static analysis and lint tool, for (ba)sh scripts
  brew "shellcheck"
  # BDD unit testing framework for dash, bash, ksh, zsh and all POSIX shells
  brew "shellspec"
  # Autoformat shell script source code
  brew "shfmt"
  # Custom parser and code formatter for Standard ML
  brew "smlfmt"
  # Secure Programming Lint
  brew "splint"
  # SQL linter to do sanity checks on your queries and bring errors back from the DB
  brew "sql-lint"
  # SQL linter and auto-formatter for Humans
  brew "sqlfluff"
  # SQL formatter with width-aware output
  brew "sqlfmt"
  # High level, imperative, object-oriented programming language
  brew "squirrel"
  # Cross-shell prompt for astronauts
  brew "starship"
  # ISO/Edinburgh-style Prolog interpreter
  brew "swi-prolog"
  # Very fast implementation of tldr in Rust
  brew "tealdeer"
  # Extremely fast LaTeX formatter written in Rust
  brew "tex-fmt"
  # Program that allows you to count code, quickly
  brew "tokei"
  # One CLI to format the code tree
  brew "treefmt"
  # Lisp-like programming language for convenient data munging
  brew "txr"
  # Formatter for typst
  brew "typstfmt"
  # Friendly programming language from the future
  brew "unisonlang"
  # Maintained ctags implementation
  brew "universal-ctags"
  # Extremely fast Python package installer and resolver, written in Rust
  brew "uv"
  # Verilog simulator
  brew "verilator"
  # Tool for creating isolated virtual python environments
  brew "virtualenv"
  # V programming language
  brew "vlang"
  # Layer providing Vulkan features when native support is unavailable
  brew "vulkan-extensionlayer"
  # Vulkan ICD Loader
  brew "vulkan-loader"
  # Vulkan utilities and tools
  brew "vulkan-tools"
  # Vulkan layers that enable developers to verify correct use of the Vulkan API
  brew "vulkan-validationlayers"
  # Meta loader for Vulkan API
  brew "vulkan-volk"
  # Small, fast, class-based concurrent scripting language
  brew "wren"
  # Check your $HOME for unwanted files and directories
  brew "xdg-ninja"
  # Statistical data science environment based on Lisp
  brew "xlispstat"
  # Extensible command-line tool to format YAML files
  brew "yamlfmt"
  # Linter for YAML files
  brew "yamllint"
  # High-performance, asynchronous messaging library
  brew "zeromq"
  # Programming language designed for robustness, optimality, and clarity
  brew "zig"
  # Package manager for the Zig programming language
  brew "zigmod"
  # Shell extension to navigate your filesystem faster
  brew "zoxide"
  # Distributed object programming environment
  brew "aconchillo/guile/guile-goblins"
  # View, create, manipulate, print and manage files in Portable Document Format
  cask "adobe-acrobat-pro"
  # E-book reader
  cask "adobe-digital-editions"
  # Application launcher and productivity software
  cask "alfred"
  # Programming language for software modelling
  cask "alloy"
  # Memory training application
  cask "anki"
  # Video calls designed for energy, ideas and action
  cask "around"
  # Asciidoc editor and toolchain to build books, documents and slides
  cask "asciidocfx"
  # Web browser focusing on privacy
  cask "brave-browser"
  # E-books management software
  cask "calibre"
  # Family of tools to build, test and package software
  cask "cmake"
  # Formal proof management system
  cask "coq-platform"
  # Multi-platform client-side cloud file encryption tool
  cask "cryptomator"
  # Voice and text chat software
  cask "discord"
  # App to build and share containerised applications and microservices
  cask "docker"
  # APL-based development environment
  cask "dyalog"
  # Matrix collaboration client
  cask "element"
  # Google Chromium, sans integration with Google
  cask "eloston-chromium"
  # Text editor
  cask "emacs"
  # Programming language
  cask "factor"
  # Web browser
  cask "firefox"
  # Privacy-focused Firefox-based browser
  cask "floorp"
  cask "font-iosevka-nerd-font"
  # Terminal emulator that uses platform-native UI and GPU acceleration
  cask "ghostty"
  # Game client
  cask "gog-galaxy"
  # Web browser
  cask "google-chrome"
  # Game launcher
  cask "heroic"
  # Dedicated scratchpad for developers
  cask "heynote"
  # Generic proof assistant
  cask "isabelle"
  # Terminal emulator as alternative to Apple's Terminal app
  cask "iterm2"
  # Programming language for mathematical, statistical and logical analysis of data
  cask "j"
  # Statistical analysis application
  cask "jasp"
  # Open-source video calls and chat
  cask "jitsi"
  # Password manager app
  cask "keepassxc"
  # End-to-end encryption software
  cask "keybase"
  # Official client for LBRY, a decentralised file-sharing and payment network
  cask "lbry"
  # Free cross-platform office suite, fresh version
  cask "libreoffice"
  # Web browser
  cask "librewolf"
  # Privacy-first, open-source platform for knowledge sharing and management
  cask "logseq"
  # Full TeX Live distribution with GUI applications
  cask "mactex"
  # Scan and remove malware, spyware, and viruses
  cask "malwarebytes"
  # Open-source, self-hosted Slack-alternative
  cask "mattermost"
  # Open-source constraint modelling language and IDE
  cask "minizincide"
  # Web browser focused on privacy and on minimizing tracking and fingerprinting
  cask "mullvad-browser"
  # VPN client
  cask "mullvadvpn"
  # Developer IDE or Management Environment for Neo4j instances
  cask "neo4j"
  # Open-source software for live streaming and screen recording
  cask "obs"
  # Securely and anonymously share files, host websites, and chat with friends
  cask "onionshare"
  # Administration and development platform for PostgreSQL
  cask "pgadmin4"
  # Ontology editor
  cask "protege"
  # IDE for application development
  cask "qt-creator"
  # Keyboard-driven, vim-like browser based on PyQt5
  cask "qutebrowser"
  # Environment for statistical computing and graphics
  cask "r"
  # Modern programming language in the Lisp/Scheme family
  cask "racket"
  # Data science software focusing on R and Python
  cask "rstudio"
  # Mathematics software system
  cask "sage"
  # Plugin for AWS CLI to start and end sessions that connect to managed instances
  cask "session-manager-plugin"
  # App that enables mouse-free UI interaction
  cask "shortcat"
  # PDF reader and note-taking application
  cask "skim"
  # Team communication and collaboration software
  cask "slack"
  # CLI to create, run, and deploy Slack apps
  cask "slack-cli"
  # Compiler for the Standard ML '97 programming language
  cask "smlnj"
  # Code-based music creation and performance tool
  cask "sonic-pi"
  # Video game digital distribution service
  cask "steam"
  # JDK from the Eclipse Foundation (Adoptium)
  cask "temurin"
  # Scientific editing platform
  cask "texmacs"
  # IDE framework
  cask "theiaide"
  # Web browser focusing on security
  cask "tor-browser"
  # Multimedia player
  cask "vlc"
  # Video communication and virtual meeting platform
  cask "zoom"
  # Desktop client for the Zulip team chat platform
  cask "zulip"
#+end_src
*** C++
#+BEGIN_SRC emacs-lisp :tangle ~/.clang-format :mkdirp yes
---
Language:        Cpp
AccessModifierOffset: 0
AlignAfterOpenBracket: BlockIndent
AlignArrayOfStructures: Right
AlignConsecutiveAssignments:
  Enabled:         true
  AcrossEmptyLines: false
  AcrossComments:  false
  AlignCompound:   true
  PadOperators:    true
AlignConsecutiveBitFields:
  Enabled:         true
  AcrossEmptyLines: false
  AcrossComments:  false
AlignConsecutiveDeclarations:
  Enabled:         true
  AcrossEmptyLines: false
  AcrossComments:  false
AlignConsecutiveMacros:
  Enabled:         true
  AcrossEmptyLines: false
  AcrossComments:  false
AlignEscapedNewlines: Right
AlignOperands:   AlignAfterOperator
AlignTrailingComments:
  Kind:            Always
  OverEmptyLines:  1
AllowAllArgumentsOnNextLine: false
AllowAllParametersOfDeclarationOnNextLine: false
AllowShortBlocksOnASingleLine: Always
AllowShortCaseLabelsOnASingleLine: true
AllowShortEnumsOnASingleLine: true
AllowShortFunctionsOnASingleLine: All
AllowShortIfStatementsOnASingleLine: WithoutElse
AllowShortLambdasOnASingleLine: All
AllowShortLoopsOnASingleLine: true
AlwaysBreakAfterReturnType: None
AlwaysBreakBeforeMultilineStrings: true
AlwaysBreakTemplateDeclarations: MultiLine
AttributeMacros:
  - __capability
BinPackArguments: false
BinPackParameters: false
BitFieldColonSpacing: After
BraceWrapping:
  AfterCaseLabel:  false
  AfterClass:      true
  AfterControlStatement: Never
  AfterEnum:       true
  AfterExternBlock: false
  AfterFunction:   true
  AfterNamespace:  false
  AfterObjCDeclaration: false
  AfterStruct:     true
  AfterUnion:      true
  BeforeCatch:     false
  BeforeElse:      false
  BeforeLambdaBody: false
  BeforeWhile:     false
  IndentBraces:    false
  SplitEmptyFunction: false
  SplitEmptyRecord: false
  SplitEmptyNamespace: false
BreakAfterAttributes: Never
BreakAfterJavaFieldAnnotations: true
BreakArrays:     false
BreakBeforeBinaryOperators: All
BreakBeforeConceptDeclarations: Allowed
BreakBeforeBraces: Custom
BreakBeforeInlineASMColon: OnlyMultiline
BreakBeforeTernaryOperators: false
BreakConstructorInitializers: BeforeComma
BreakInheritanceList: BeforeComma
BreakStringLiterals: true
ColumnLimit:     80
CommentPragmas:  '^ IWYU pragma:'
CompactNamespaces: false
ConstructorInitializerIndentWidth: 2
ContinuationIndentWidth: 2
Cpp11BracedListStyle: false
DerivePointerAlignment: false
DisableFormat:   false
EmptyLineAfterAccessModifier: Never
EmptyLineBeforeAccessModifier: LogicalBlock
FixNamespaceComments: true
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH
IfMacros:
  - KJ_IF_MAYBE
IncludeBlocks:   Regroup
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    2
    CaseSensitive:   true
  - Regex:           '^((<|")(gtest|gmock|isl|json)/)'
    Priority:        3
  - Regex:           '<[[:alnum:].]+>'
    Priority:        4
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0
IncludeIsMainRegex: '(Test)?$'
IncludeIsMainSourceRegex: ''
IndentAccessModifiers: false
IndentCaseBlocks: true
IndentCaseLabels: true
IndentExternBlock: AfterExternBlock
IndentGotoLabels: false
IndentPPDirectives: AfterHash
IndentRequiresClause: true
IndentWidth:     2
IndentWrappedFunctionNames: false
InsertBraces:    false
InsertNewlineAtEOF: true
IntegerLiteralSeparator:
  Binary:          0
  BinaryMinDigits: 0
  Decimal:         0
  DecimalMinDigits: 0
  Hex:             0
  HexMinDigits:    0
KeepEmptyLinesAtTheStartOfBlocks: true
LambdaBodyIndentation: OuterScope
LineEnding:      DeriveLF
MacroBlockBegin: ''
MacroBlockEnd:   ''
MaxEmptyLinesToKeep: 4
NamespaceIndentation: All
PackConstructorInitializers: CurrentLine
PenaltyBreakAssignment: 2
PenaltyBreakBeforeFirstCallParameter: 19
PenaltyBreakComment: 300
PenaltyBreakFirstLessLess: 120
PenaltyBreakOpenParenthesis: 0
PenaltyBreakString: 1000
PenaltyBreakTemplateDeclaration: 10
PenaltyExcessCharacter: 1000000
PenaltyIndentedWhitespace: 0
PenaltyReturnTypeOnItsOwnLine: 60
PointerAlignment: Right
PPIndentWidth:   -1
QualifierAlignment: Leave
ReferenceAlignment: Pointer
ReflowComments:  true
RemoveBracesLLVM: false
RemoveSemicolon: false
RequiresClausePosition: WithPreceding
RequiresExpressionIndentation: OuterScope
SeparateDefinitionBlocks: Leave
ShortNamespaceLines: 1
SortIncludes:    CaseSensitive
SortUsingDeclarations: LexicographicNumeric
SpaceAfterCStyleCast: false
SpaceAfterLogicalNot: false
SpaceAfterTemplateKeyword: true
SpaceAroundPointerQualifiers: Before
SpaceBeforeAssignmentOperators: true
SpaceBeforeCaseColon: false
SpaceBeforeCpp11BracedList: false
SpaceBeforeCtorInitializerColon: false
SpaceBeforeInheritanceColon: false
SpaceBeforeParens: Custom
SpaceBeforeParensOptions:
  AfterControlStatements: true
  AfterForeachMacros: true
  AfterFunctionDefinitionName: false
  AfterFunctionDeclarationName: false
  AfterIfMacros:   true
  AfterOverloadedOperator: false
  AfterRequiresInClause: true
  AfterRequiresInExpression: true
  BeforeNonEmptyParentheses: false
SpaceBeforeRangeBasedForLoopColon: false
SpaceBeforeSquareBrackets: false
SpaceInEmptyBlock: false
SpaceInEmptyParentheses: false
SpacesBeforeTrailingComments: 1
SpacesInAngles:  Never
SpacesInConditionalStatement: false
SpacesInContainerLiterals: true
SpacesInCStyleCastParentheses: false
SpacesInLineCommentPrefix:
  Minimum:         1
  Maximum:         -1
SpacesInParentheses: false
SpacesInSquareBrackets: false
Standard:        Latest
StatementAttributeLikeMacros:
  - Q_EMIT
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION
TabWidth:        2
UseTab:          Never
WhitespaceSensitiveMacros:
  - BOOST_PP_STRINGIZE
  - CF_SWIFT_NAME
  - NS_SWIFT_NAME
  - PP_STRINGIZE
  - STRINGIZE
...
#+END_SRC
*** Editors
#+BEGIN_SRC emacs-lisp :tangle ~/.editorconfig :mkdirp yes
[*]
end_of_line = lf
insert_final_newline = true

[*.{c,h,cpp,hpp}]
charset = utf-8
indent_style = space
indent_size = 2
trim_trailing_whitespace = true
#+END_SRC
